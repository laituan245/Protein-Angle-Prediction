import json
import random
import numpy as np

from torch.autograd import Variable
from torch import FloatTensor, LongTensor

# Define the dictionary with the physical properties for each AA
PHYS_DICT = {'A': [-0.350, -0.680, -0.677, -0.171, -0.170, 0.900, -0.476],
             'C': [-0.140, -0.329, -0.359, 0.508, -0.114, -0.652, 0.476],
             'D': [-0.213, -0.417, -0.281, -0.767, -0.900, -0.155, -0.635],
             'E': [-0.230, -0.241, -0.058, -0.696, -0.868, 0.900, -0.582],
             'F': [ 0.363, 0.373, 0.412, 0.646, -0.272, 0.155, 0.318],
             'G': [-0.900, -0.900, -0.900, -0.342, -0.179, -0.900, -0.900],
             'H': [ 0.384, 0.110, 0.138, -0.271, 0.195, -0.031, -0.106],
             'I': [ 0.900, -0.066, -0.009, 0.652, -0.186, 0.155, 0.688],
             'K': [-0.088, 0.066, 0.163, -0.889, 0.727, 0.279, -0.265],
             'L': [ 0.213, -0.066, -0.009, 0.596, -0.186, 0.714, -0.053],
             'M': [ 0.110, 0.066, 0.087, 0.337, -0.262, 0.652, -0.001],
             'N': [-0.213, -0.329, -0.243, -0.674, -0.075, -0.403, -0.529],
             'P': [ 0.247, -0.900, -0.294, 0.055, -0.010, -0.900, 0.106],
             'Q': [-0.230, -0.110, -0.020, -0.464, -0.276, 0.528, -0.371],
             'R': [ 0.105, 0.373, 0.466, -0.900, 0.900, 0.528, -0.371],
             'S': [-0.337, -0.637, -0.544, -0.364, -0.265, -0.466, -0.212],
             'T': [ 0.402, -0.417, -0.321, -0.199, -0.288, -0.403, 0.212],
             'V': [ 0.677, -0.285, -0.232, 0.331, -0.191, -0.031, 0.900],
             'W': [ 0.479, 0.900, 0.900, 0.900, -0.209, 0.279, 0.529],
             'Y': [ 0.363, 0.417, 0.541, 0.188, -0.274, -0.155, 0.476],
             'X': [ 0.0771,-0.1536, -0.0620, -0.0762, -0.1451,  0.0497, -0.0398],
             'Z': [ 0.0771,-0.1536, -0.0620, -0.0762, -0.1451,  0.0497, -0.0398]}

# Define the dictionary with the onehot vector for each AA
AA_DICT = {'A':[1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'C':[0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'D':[0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'E':[0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'F':[0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'G':[0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'H':[0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'I':[0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'K':[0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'L':[0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'M':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,0.],
           'N':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.],
           'P':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.],
           'Q':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.],
           'R':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.],
           'S':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.],
           'T':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.],
           'V':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.],
           'W':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.],
           'Y':[0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.]}

# Define the BLOSUM50 Matrix
BLOSUM_DICT = {'A':[ 5.,-2.,-1.,-2.,-1.,-1.,-1., 0.,-2.,-1.,-2.,-1.,-1.,-3.,-1., 1., 0.,-3.,-2., 0.],
               'C':[-1.,-4.,-2.,-4.,13.,-3.,-3.,-3.,-3.,-2.,-2.,-3.,-2.,-2.,-4.,-1.,-1.,-5.,-3.,-1.],
               'D':[-2.,-2., 2., 8.,-4., 0., 2.,-1.,-1.,-4.,-4.,-1.,-4.,-5.,-1., 0.,-1.,-5.,-3.,-4.],
               'E':[-1., 0., 0., 2.,-3., 2., 6.,-3., 0.,-4.,-3., 1.,-2.,-3.,-1.,-1.,-1.,-3.,-2.,-3.],
               'F':[-3.,-3.,-4.,-5.,-2.,-4.,-3.,-4.,-1., 0., 1.,-4., 0., 8.,-4.,-3.,-2., 1., 4.,-1.],
               'G':[ 0.,-3., 0.,-1.,-3.,-2.,-3., 8.,-2.,-4.,-4.,-2.,-3.,-4.,-2., 0.,-2.,-3.,-3.,-4.],
               'H':[-2., 0., 1.,-1.,-3., 1., 0.,-2.,10.,-4.,-3., 0.,-1.,-1.,-2.,-1.,-2.,-3., 2.,-4.],
               'I':[-1.,-4.,-3.,-4.,-2.,-3.,-4.,-4.,-4., 5., 2.,-3., 2., 0.,-3.,-3.,-1.,-3.,-1., 4.],
               'K':[-1., 3., 0.,-1.,-3., 2., 1.,-2., 0.,-3.,-3., 6.,-2.,-4.,-1., 0.,-1.,-3.,-2.,-3.],
               'L':[-2.,-3.,-4.,-4.,-2.,-2.,-3.,-4.,-3., 2., 5.,-3., 3., 1.,-4.,-3.,-1.,-2.,-1., 1.],
               'M':[-1.,-2.,-2.,-4.,-2., 0.,-2.,-3.,-1., 2., 3.,-2., 7., 0.,-3.,-2.,-1.,-1., 0., 1.],
               'N':[-1.,-1., 7., 2.,-2., 0., 0., 0., 1.,-3 ,-4., 0.,-2.,-4.,-2., 1., 0.,-4.,-2.,-3.],
               'P':[-1.,-3.,-2.,-1.,-4.,-1.,-1.,-2.,-2.,-3.,-4.,-1.,-3.,-4.,10.,-1.,-1.,-4.,-3.,-3.],
               'Q':[-1., 1., 0., 0.,-3., 7., 2.,-2., 1.,-3.,-2., 2., 0.,-4.,-1., 0.,-1.,-1.,-1.,-3.],
               'R':[-2., 7.,-1.,-2.,-4., 1., 0.,-3., 0.,-4.,-3., 3.,-2.,-3.,-3.,-1.,-1.,-3.,-1.,-3.],
               'S':[ 1.,-1., 1., 0.,-1., 0.,-1., 0.,-1.,-3.,-3., 0.,-2.,-3.,-1., 5., 2.,-4.,-2.,-2.],
               'T':[ 0.,-1., 0.,-1.,-1.,-1.,-1.,-2.,-2.,-1.,-1.,-1.,-1.,-2.,-1., 2., 5.,-3.,-2., 0.],
               'V':[ 0.,-3.,-3.,-4.,-1.,-3.,-3.,-4.,-4., 4., 1.,-3., 1.,-1.,-3.,-2., 0.,-3.,-1., 5.],
               'W':[-3.,-3.,-4.,-5.,-5.,-1.,-3.,-3.,-3.,-3.,-2.,-3.,-1., 1.,-4.,-4.,-3.,15., 2.,-3.],
               'Y':[-2.,-1.,-2.,-3.,-3.,-1.,-2.,-3., 2.,-1.,-1.,-2., 0., 4.,-3.,-2.,-2., 2., 8.,-1.]}

# Define the dictionary with the onehot vector for each DSSP struct code
SS_DICT = {'H': [1.,0.,0.,0.,0.,0.,0.,0.],
           'B': [0.,1.,0.,0.,0.,0.,0.,0.],
           'E': [0.,0.,1.,0.,0.,0.,0.,0.],
           'G': [0.,0.,0.,1.,0.,0.,0.,0.],
           'I': [0.,0.,0.,0.,1.,0.,0.,0.],
           'T': [0.,0.,0.,0.,0.,1.,0.,0.],
           'S': [0.,0.,0.,0.,0.,0.,1.,0.],
           'C': [0.,0.,0.,0.,0.,0.,0.,1.]}

def read_json(fn):
    with open(fn) as f:
        return json.load(f)

def read_ccmpred(fn):
    matrix = []
    f = open(fn, 'r')
    for line in f:
        elements = line.strip().split()
        elements = [np.float(e) for e in elements]
        matrix.append(elements)
    f.close()
    return np.asarray(matrix)

class AugmentedList:
    def __init__(self, items, shuffle_between_epoch=False):
        self.items = items
        self.cur_idx = 0
        self.shuffle_between_epoch = shuffle_between_epoch

    def next_items(self, batch_size):
        items = self.items
        start_idx = self.cur_idx
        end_idx = start_idx + batch_size
        if end_idx <= self.size:
            self.cur_idx = end_idx % self.size
            return items[start_idx : end_idx]
        else:
            first_part = items[start_idx : self.size]
            remain_size = batch_size - (self.size - start_idx)
            second_part = items[0 : remain_size]
            self.cur_idx = remain_size
            returned_batch = [item for item in first_part + second_part]
            if self.shuffle_between_epoch:
                random.shuffle(self.items)
            return returned_batch

    @property
    def size(self):
        return len(self.items)
